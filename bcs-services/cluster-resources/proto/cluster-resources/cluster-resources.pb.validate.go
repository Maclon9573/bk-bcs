// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/cluster-resources/cluster-resources.proto

package cluster_resources

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EchoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EchoReqMultiError, or nil if none found.
func (m *EchoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetStr()); l < 2 || l > 30 {
		err := EchoReqValidationError{
			field:  "Str",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_EchoReq_Str_Pattern.MatchString(m.GetStr()) {
		err := EchoReqValidationError{
			field:  "Str",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EchoReqMultiError(errors)
	}
	return nil
}

// EchoReqMultiError is an error wrapping multiple validation errors returned
// by EchoReq.ValidateAll() if the designated constraints aren't met.
type EchoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoReqMultiError) AllErrors() []error { return m }

// EchoReqValidationError is the validation error returned by EchoReq.Validate
// if the designated constraints aren't met.
type EchoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoReqValidationError) ErrorName() string { return "EchoReqValidationError" }

// Error satisfies the builtin error interface
func (e EchoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoReqValidationError{}

var _EchoReq_Str_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on EchoResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EchoRespMultiError, or nil
// if none found.
func (m *EchoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ret

	if len(errors) > 0 {
		return EchoRespMultiError(errors)
	}
	return nil
}

// EchoRespMultiError is an error wrapping multiple validation errors returned
// by EchoResp.ValidateAll() if the designated constraints aren't met.
type EchoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoRespMultiError) AllErrors() []error { return m }

// EchoRespValidationError is the validation error returned by
// EchoResp.Validate if the designated constraints aren't met.
type EchoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoRespValidationError) ErrorName() string { return "EchoRespValidationError" }

// Error satisfies the builtin error interface
func (e EchoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoRespValidationError{}

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}
	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PingResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespMultiError, or nil
// if none found.
func (m *PingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ret

	if len(errors) > 0 {
		return PingRespMultiError(errors)
	}
	return nil
}

// PingRespMultiError is an error wrapping multiple validation errors returned
// by PingResp.ValidateAll() if the designated constraints aren't met.
type PingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespMultiError) AllErrors() []error { return m }

// PingRespValidationError is the validation error returned by
// PingResp.Validate if the designated constraints aren't met.
type PingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespValidationError) ErrorName() string { return "PingRespValidationError" }

// Error satisfies the builtin error interface
func (e PingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespValidationError{}

// Validate checks the field values on HealthzReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthzReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthzReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthzReqMultiError, or
// nil if none found.
func (m *HealthzReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthzReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthzReqMultiError(errors)
	}
	return nil
}

// HealthzReqMultiError is an error wrapping multiple validation errors
// returned by HealthzReq.ValidateAll() if the designated constraints aren't met.
type HealthzReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthzReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthzReqMultiError) AllErrors() []error { return m }

// HealthzReqValidationError is the validation error returned by
// HealthzReq.Validate if the designated constraints aren't met.
type HealthzReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzReqValidationError) ErrorName() string { return "HealthzReqValidationError" }

// Error satisfies the builtin error interface
func (e HealthzReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzReqValidationError{}

// Validate checks the field values on HealthzResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthzResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthzResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthzRespMultiError, or
// nil if none found.
func (m *HealthzResp) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthzResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for CallTime

	if len(errors) > 0 {
		return HealthzRespMultiError(errors)
	}
	return nil
}

// HealthzRespMultiError is an error wrapping multiple validation errors
// returned by HealthzResp.ValidateAll() if the designated constraints aren't met.
type HealthzRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthzRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthzRespMultiError) AllErrors() []error { return m }

// HealthzRespValidationError is the validation error returned by
// HealthzResp.Validate if the designated constraints aren't met.
type HealthzRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzRespValidationError) ErrorName() string { return "HealthzRespValidationError" }

// Error satisfies the builtin error interface
func (e HealthzRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzRespValidationError{}

// Validate checks the field values on VersionReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionReqMultiError, or
// nil if none found.
func (m *VersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionReqMultiError(errors)
	}
	return nil
}

// VersionReqMultiError is an error wrapping multiple validation errors
// returned by VersionReq.ValidateAll() if the designated constraints aren't met.
type VersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionReqMultiError) AllErrors() []error { return m }

// VersionReqValidationError is the validation error returned by
// VersionReq.Validate if the designated constraints aren't met.
type VersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionReqValidationError) ErrorName() string { return "VersionReqValidationError" }

// Error satisfies the builtin error interface
func (e VersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionReqValidationError{}

// Validate checks the field values on VersionResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionRespMultiError, or
// nil if none found.
func (m *VersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for GitCommit

	// no validation rules for BuildTime

	// no validation rules for GoVersion

	// no validation rules for CallTime

	if len(errors) > 0 {
		return VersionRespMultiError(errors)
	}
	return nil
}

// VersionRespMultiError is an error wrapping multiple validation errors
// returned by VersionResp.ValidateAll() if the designated constraints aren't met.
type VersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionRespMultiError) AllErrors() []error { return m }

// VersionRespValidationError is the validation error returned by
// VersionResp.Validate if the designated constraints aren't met.
type VersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionRespValidationError) ErrorName() string { return "VersionRespValidationError" }

// Error satisfies the builtin error interface
func (e VersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionRespValidationError{}

// Validate checks the field values on NamespaceScopedResListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceScopedResListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceScopedResListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceScopedResListReqMultiError, or nil if none found.
func (m *NamespaceScopedResListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceScopedResListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_NamespaceScopedResListReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := NamespaceScopedResListReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 14 {
		err := NamespaceScopedResListReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 14 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := NamespaceScopedResListReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResListReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := NamespaceScopedResListReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabelSelector()) > 128 {
		err := NamespaceScopedResListReqValidationError{
			field:  "LabelSelector",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOwnerName()) > 256 {
		err := NamespaceScopedResListReqValidationError{
			field:  "OwnerName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOwnerKind()) > 64 {
		err := NamespaceScopedResListReqValidationError{
			field:  "OwnerKind",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NamespaceScopedResListReqMultiError(errors)
	}
	return nil
}

// NamespaceScopedResListReqMultiError is an error wrapping multiple validation
// errors returned by NamespaceScopedResListReq.ValidateAll() if the
// designated constraints aren't met.
type NamespaceScopedResListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceScopedResListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceScopedResListReqMultiError) AllErrors() []error { return m }

// NamespaceScopedResListReqValidationError is the validation error returned by
// NamespaceScopedResListReq.Validate if the designated constraints aren't met.
type NamespaceScopedResListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceScopedResListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceScopedResListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceScopedResListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceScopedResListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceScopedResListReqValidationError) ErrorName() string {
	return "NamespaceScopedResListReqValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceScopedResListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceScopedResListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceScopedResListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceScopedResListReqValidationError{}

var _NamespaceScopedResListReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _NamespaceScopedResListReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on NamespaceScopedResGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceScopedResGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceScopedResGetReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceScopedResGetReqMultiError, or nil if none found.
func (m *NamespaceScopedResGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceScopedResGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_NamespaceScopedResGetReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := NamespaceScopedResGetReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 14 {
		err := NamespaceScopedResGetReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 14 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := NamespaceScopedResGetReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResGetReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := NamespaceScopedResGetReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := NamespaceScopedResGetReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResGetReq_Name_Pattern.MatchString(m.GetName()) {
		err := NamespaceScopedResGetReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NamespaceScopedResGetReqMultiError(errors)
	}
	return nil
}

// NamespaceScopedResGetReqMultiError is an error wrapping multiple validation
// errors returned by NamespaceScopedResGetReq.ValidateAll() if the designated
// constraints aren't met.
type NamespaceScopedResGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceScopedResGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceScopedResGetReqMultiError) AllErrors() []error { return m }

// NamespaceScopedResGetReqValidationError is the validation error returned by
// NamespaceScopedResGetReq.Validate if the designated constraints aren't met.
type NamespaceScopedResGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceScopedResGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceScopedResGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceScopedResGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceScopedResGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceScopedResGetReqValidationError) ErrorName() string {
	return "NamespaceScopedResGetReqValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceScopedResGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceScopedResGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceScopedResGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceScopedResGetReqValidationError{}

var _NamespaceScopedResGetReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _NamespaceScopedResGetReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _NamespaceScopedResGetReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on NamespaceScopedResCreateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceScopedResCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceScopedResCreateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceScopedResCreateReqMultiError, or nil if none found.
func (m *NamespaceScopedResCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceScopedResCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_NamespaceScopedResCreateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := NamespaceScopedResCreateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 14 {
		err := NamespaceScopedResCreateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 14 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetManifest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceScopedResCreateReqValidationError{
					field:  "Manifest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceScopedResCreateReqValidationError{
					field:  "Manifest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManifest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceScopedResCreateReqValidationError{
				field:  "Manifest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamespaceScopedResCreateReqMultiError(errors)
	}
	return nil
}

// NamespaceScopedResCreateReqMultiError is an error wrapping multiple
// validation errors returned by NamespaceScopedResCreateReq.ValidateAll() if
// the designated constraints aren't met.
type NamespaceScopedResCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceScopedResCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceScopedResCreateReqMultiError) AllErrors() []error { return m }

// NamespaceScopedResCreateReqValidationError is the validation error returned
// by NamespaceScopedResCreateReq.Validate if the designated constraints
// aren't met.
type NamespaceScopedResCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceScopedResCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceScopedResCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceScopedResCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceScopedResCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceScopedResCreateReqValidationError) ErrorName() string {
	return "NamespaceScopedResCreateReqValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceScopedResCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceScopedResCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceScopedResCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceScopedResCreateReqValidationError{}

var _NamespaceScopedResCreateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on NamespaceScopedResUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceScopedResUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceScopedResUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceScopedResUpdateReqMultiError, or nil if none found.
func (m *NamespaceScopedResUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceScopedResUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_NamespaceScopedResUpdateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := NamespaceScopedResUpdateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 14 {
		err := NamespaceScopedResUpdateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 14 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := NamespaceScopedResUpdateReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResUpdateReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := NamespaceScopedResUpdateReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := NamespaceScopedResUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResUpdateReq_Name_Pattern.MatchString(m.GetName()) {
		err := NamespaceScopedResUpdateReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetManifest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceScopedResUpdateReqValidationError{
					field:  "Manifest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceScopedResUpdateReqValidationError{
					field:  "Manifest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManifest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceScopedResUpdateReqValidationError{
				field:  "Manifest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamespaceScopedResUpdateReqMultiError(errors)
	}
	return nil
}

// NamespaceScopedResUpdateReqMultiError is an error wrapping multiple
// validation errors returned by NamespaceScopedResUpdateReq.ValidateAll() if
// the designated constraints aren't met.
type NamespaceScopedResUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceScopedResUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceScopedResUpdateReqMultiError) AllErrors() []error { return m }

// NamespaceScopedResUpdateReqValidationError is the validation error returned
// by NamespaceScopedResUpdateReq.Validate if the designated constraints
// aren't met.
type NamespaceScopedResUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceScopedResUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceScopedResUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceScopedResUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceScopedResUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceScopedResUpdateReqValidationError) ErrorName() string {
	return "NamespaceScopedResUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceScopedResUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceScopedResUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceScopedResUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceScopedResUpdateReqValidationError{}

var _NamespaceScopedResUpdateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _NamespaceScopedResUpdateReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _NamespaceScopedResUpdateReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on NamespaceScopedResDeleteReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceScopedResDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceScopedResDeleteReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceScopedResDeleteReqMultiError, or nil if none found.
func (m *NamespaceScopedResDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceScopedResDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_NamespaceScopedResDeleteReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := NamespaceScopedResDeleteReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 14 {
		err := NamespaceScopedResDeleteReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 14 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := NamespaceScopedResDeleteReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResDeleteReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := NamespaceScopedResDeleteReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := NamespaceScopedResDeleteReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NamespaceScopedResDeleteReq_Name_Pattern.MatchString(m.GetName()) {
		err := NamespaceScopedResDeleteReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NamespaceScopedResDeleteReqMultiError(errors)
	}
	return nil
}

// NamespaceScopedResDeleteReqMultiError is an error wrapping multiple
// validation errors returned by NamespaceScopedResDeleteReq.ValidateAll() if
// the designated constraints aren't met.
type NamespaceScopedResDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceScopedResDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceScopedResDeleteReqMultiError) AllErrors() []error { return m }

// NamespaceScopedResDeleteReqValidationError is the validation error returned
// by NamespaceScopedResDeleteReq.Validate if the designated constraints
// aren't met.
type NamespaceScopedResDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceScopedResDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceScopedResDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceScopedResDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceScopedResDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceScopedResDeleteReqValidationError) ErrorName() string {
	return "NamespaceScopedResDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceScopedResDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceScopedResDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceScopedResDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceScopedResDeleteReqValidationError{}

var _NamespaceScopedResDeleteReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _NamespaceScopedResDeleteReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _NamespaceScopedResDeleteReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ClusterScopedResListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterScopedResListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterScopedResListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterScopedResListReqMultiError, or nil if none found.
func (m *ClusterScopedResListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterScopedResListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ClusterScopedResListReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ClusterScopedResListReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 14 {
		err := ClusterScopedResListReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 14 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterScopedResListReqMultiError(errors)
	}
	return nil
}

// ClusterScopedResListReqMultiError is an error wrapping multiple validation
// errors returned by ClusterScopedResListReq.ValidateAll() if the designated
// constraints aren't met.
type ClusterScopedResListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterScopedResListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterScopedResListReqMultiError) AllErrors() []error { return m }

// ClusterScopedResListReqValidationError is the validation error returned by
// ClusterScopedResListReq.Validate if the designated constraints aren't met.
type ClusterScopedResListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterScopedResListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterScopedResListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterScopedResListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterScopedResListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterScopedResListReqValidationError) ErrorName() string {
	return "ClusterScopedResListReqValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterScopedResListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterScopedResListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterScopedResListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterScopedResListReqValidationError{}

var _ClusterScopedResListReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on CommonResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonRespMultiError, or
// nil if none found.
func (m *CommonResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for RequestID

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonRespMultiError(errors)
	}
	return nil
}

// CommonRespMultiError is an error wrapping multiple validation errors
// returned by CommonResp.ValidateAll() if the designated constraints aren't met.
type CommonRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonRespMultiError) AllErrors() []error { return m }

// CommonRespValidationError is the validation error returned by
// CommonResp.Validate if the designated constraints aren't met.
type CommonRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonRespValidationError) ErrorName() string { return "CommonRespValidationError" }

// Error satisfies the builtin error interface
func (e CommonRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonRespValidationError{}
